
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, 
    ConversationHandler, ContextTypes, CallbackQueryHandler, filters
)
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, ReplyKeyboardMarkup, ReplyKeyboardRemove,  KeyboardButton
from telegram.ext import ContextTypes
from pathlib import Path
from telegram.ext import ContextTypes
from enum import Enum, auto

async def timeout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message:
        await update.message.reply_text(
            "‚è∞ –í–∏ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª–∏ –ø—Ä–æ—Ç—è–≥–æ–º 30 —Ö–≤–∏–ª–∏–Ω. –°–µ—Å—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n"
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É."
        )
    elif update.callback_query:
        await update.callback_query.message.reply_text(
            "‚è∞ –í–∏ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª–∏ –ø—Ä–æ—Ç—è–≥–æ–º 30 —Ö–≤–∏–ª–∏–Ω. –°–µ—Å—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n"
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É."
        )
    return ConversationHandler.END

class Questions:
    NAME = "–Ø–∫ —è –º–æ–∂—É –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è?"
    PHONE = "–û—Å–æ–±–∏—Å—Ç–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:"
    BUSINESS = "–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –≤–∞—à–æ–≥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–±–æ  –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É (–Ω–∞–∑–≤–∞, –Ω—ñ—à–∞, —Ä—ñ–∫ –∑–∞—Å–Ω—É–≤–∞–Ω–Ω—è):"
    WEBSITE = "–°–∞–π—Ç —Ç–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ –≤–∞—à–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É:"
    EMPLOYEES = "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤:"
    LEGAL_FORM = "–§–æ—Ä–º–∞ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ:"
    ROLES = "–Ø–∫—ñ —Ä–æ–ª—ñ –≤–∏ –≤–∏–∫–æ–Ω—É—î—Ç–µ –≤ –±—ñ–∑–Ω–µ—Å—ñ?"
    FIN_KNOWLEDGE = "–ß–∏ —Ä–æ–∑—É–º—ñ—î—Ç–µ –≤–∏ —Ä—ñ–∑–Ω–∏—Ü—é –º—ñ–∂ P&L —Ç–∞ Cash Flow?"
    FIN_PERSON = "–•—Ç–æ –∑ –∫–æ–º–∞–Ω–¥–∏ –∑–∞–π–º–∞—î—Ç—å—Å—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–º –∞–Ω–∞–ª—ñ–∑–æ–º?"
    FIN_REPORTS = "–Ø–∫—ñ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –∑–≤—ñ—Ç–∏ —Ç–∞ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É—é—Ç—å—Å—è —Å—Ç–∞–Ω–æ–º –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ?"
    CRM = "–ß–∏ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å CRM —Å–∏—Å—Ç–µ–º–æ—é?"
    CRM_NAME = "–Ø–∫—â–æ —Ç–∞–∫, —Ç–æ —è–∫–æ—é CRM –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å?"
    FINMAP = "–ß–∏ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å –¥–æ–¥–∞—Ç–∫–æ–º Finmap?"
    GOOGLE_SHEETS = "–ß–∏ –≤–µ–¥–µ—Ç–µ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –æ–±–ª—ñ–∫ —É Google –¢–∞–±–ª–∏—Ü—è—Ö?"
    MEETINGS = "–ß–∏ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –Ω–∞—Ä–∞–¥ —ñ–∑ –∫–æ–º–∞–Ω–¥–æ—é?"
    MEETING_DETAILS = "–í —è–∫–∏—Ö –∫–ª—é—á–æ–≤–∏—Ö –Ω–∞—Ä–∞–¥–∞—Ö –ø—Ä–∏–π–º–∞—î—Ç–µ —É—á–∞—Å—Ç—å?"
    REQUESTS = "–î–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à—ñ—Ç—å –∑–∞–ø–∏—Ç–∏, —è–∫—ñ —Å–ø–æ–Ω—É–∫–∞–ª–∏ –≤–∞—Å –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –ø–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é/–∞—É–¥–∏—Ç/—Ñ—ñ–Ω.–º–æ–¥–µ–ª—å:"
    USED_CONSULTANTS = "–ß–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–ª–∏—Å—å –≤–∏ —Ä–∞–Ω—ñ—à–µ –ø–æ—Å–ª—É–≥–∞–º–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ñ–≤?"
    FORMAT = "–ë–∞–∂–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –∑—É—Å—Ç—Ä—ñ—á—ñ:"
    REFERRAL = "–Ø–∫ –≤–∏ –¥—ñ–∑–Ω–∞–ª–∏—Å—å –ø—Ä–æ –º–µ–Ω–µ?"
    CONFIRM = "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"

class States(Enum):
    NAME = auto()
    PHONE = auto()
    BUSINESS = auto()
    WEBSITE = auto()
    EMPLOYEES = auto()
    LEGAL_FORM = auto()
    ROLES = auto()
    FIN_KNOWLEDGE = auto()
    FIN_PERSON = auto()
    FIN_REPORTS = auto()
    CRM = auto()
    CRM_NAME = auto()
    FINMAP = auto()
    GOOGLE_SHEETS = auto()
    MEETINGS = auto()
    MEETING_DETAILS = auto()
    REQUESTS = auto()
    USED_CONSULTANTS = auto()
    FORMAT = auto()
    REFERRAL = auto()
    CONFIRM = auto()
    CALLENDLY = auto()

def build_summary_o(user_data: dict) -> str:
    lines = [
        f"{Questions.NAME}: {user_data.get(States.NAME)}",
        f"{Questions.PHONE}: {user_data.get(States.PHONE)}",
        f"{Questions.BUSINESS}: {user_data.get(States.BUSINESS)}",
        f"{Questions.WEBSITE}: {user_data.get(States.WEBSITE)}",
        f"{Questions.EMPLOYEES}: {user_data.get(States.EMPLOYEES)}",
        f"{Questions.LEGAL_FORM}: {user_data.get(States.LEGAL_FORM)}",
        f"{Questions.ROLES}: {user_data.get(States.ROLES)}",
        f"{Questions.FIN_KNOWLEDGE}: {user_data.get(States.FIN_KNOWLEDGE)}",
        f"{Questions.FIN_PERSON}: {user_data.get(States.FIN_PERSON)}",
        f"{Questions.FIN_REPORTS}: {user_data.get(States.FIN_REPORTS)}",
        f"{Questions.CRM}: {user_data.get(States.CRM)}",
        f"{Questions.CRM_NAME}: {user_data.get(States.CRM_NAME)}",
        f"{Questions.FINMAP}: {user_data.get(States.FINMAP)}",
        f"{Questions.GOOGLE_SHEETS}: {user_data.get(States.GOOGLE_SHEETS)}",
        f"{Questions.MEETINGS}: {user_data.get(States.MEETINGS)}",
        f"{Questions.MEETING_DETAILS}: {user_data.get(States.MEETING_DETAILS)}",
        f"{Questions.REQUESTS}: {user_data.get(States.REQUESTS)}",
        f"{Questions.USED_CONSULTANTS}: {user_data.get(States.USED_CONSULTANTS)}",
        f"{Questions.FORMAT}: {user_data.get(States.FORMAT)}",
        f"{Questions.REFERRAL}: {user_data.get(States.REFERRAL)}",
    ]

    # –î–æ–¥–∞—î–º–æ –Ω—É–º–µ—Ä–∞—Ü—ñ—é –¥–æ –∫–æ–∂–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    numbered_lines = [f"{i+1}. {line}" for i, line in enumerate(lines)]

    return "\n\n".join(numbered_lines)

def build_summary(user_data: dict) -> str:
    fields = [
        (Questions.NAME, States.NAME),
        (Questions.PHONE, States.PHONE),
        (Questions.BUSINESS, States.BUSINESS),
        (Questions.WEBSITE, States.WEBSITE),
        (Questions.EMPLOYEES, States.EMPLOYEES),
        (Questions.LEGAL_FORM, States.LEGAL_FORM),
        (Questions.ROLES, States.ROLES),
        (Questions.FIN_KNOWLEDGE, States.FIN_KNOWLEDGE),
        (Questions.FIN_PERSON, States.FIN_PERSON),
        (Questions.FIN_REPORTS, States.FIN_REPORTS),
        (Questions.CRM, States.CRM),
        (Questions.CRM_NAME, States.CRM_NAME),
        (Questions.FINMAP, States.FINMAP),
        (Questions.GOOGLE_SHEETS, States.GOOGLE_SHEETS),
        (Questions.MEETINGS, States.MEETINGS),
        (Questions.MEETING_DETAILS, States.MEETING_DETAILS),
        (Questions.REQUESTS, States.REQUESTS),
        (Questions.USED_CONSULTANTS, States.USED_CONSULTANTS),
        (Questions.FORMAT, States.FORMAT),
        (Questions.REFERRAL, States.REFERRAL),
    ]

    numbered_lines = [
        f"{i+1}. *{question}* \n‚Üí `{user_data.get(state, '‚Äî')}`"
        for i, (question, state) in enumerate(fields)
    ]

    return "\n\n".join(numbered_lines)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üí° *–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É EMMA Consulting*\n\n"
        "–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –ø—Ä–æ–π—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è —ñ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á –∑ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–º –µ–∫—Å–ø–µ—Ä—Ç–æ–º.\n\n"
        "–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "‚Ä¢ /start ‚Äî –ø–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –±–æ—Ç–æ–º\n"
        "‚Ä¢ /cancel ‚Äî —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è\n"
        "‚Ä¢ /restart ‚Äî –ø–æ—á–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–Ω–æ–≤–æ\n"
        "‚Ä¢ /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n\n"
        "–Ø–∫—â–æ –º–∞—î—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å, –º–∏ –∑–∞–≤–∂–¥–∏ —Ä–∞–¥—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏!"
        ,
        parse_mode='Markdown'
    )


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    context.chat_data.clear()

    await update.message.reply_text(
        "‚ùå –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –©–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    context.chat_data.clear()
    await update.message.reply_text(
        " –í–∏ —Ä–æ–∑–ø–æ—á–∞–ª–∏ –∞–Ω–∫–µ—Ç—É —Å–ø–æ—á–∞—Ç–∫—É.\n\n"
        f"{Questions.NAME}",
        reply_markup=ReplyKeyboardRemove()
    )
    return States.NAME

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    # –ü–µ—Ä—à–µ ‚Äî –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await update.message.reply_text(
        f"–í—ñ—Ç–∞—é, {user.first_name or '—à–∞–Ω–æ–≤–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É'}! üëã\n\n"
        "–Ø ‚Äî –±–æ—Ç –∫–æ–º–∞–Ω–¥–∏ *EMMA Consulting*. –î–æ–ø–æ–º–æ–∂—É –∑—ñ–±—Ä–∞—Ç–∏ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø–µ—Ä–µ–¥ –≤–∞—à–æ—é –∑—É—Å—Ç—Ä—ñ—á—á—é –∑ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–º –µ–∫—Å–ø–µ—Ä—Ç–æ–º.\n\n"
        "üìã –Ø –ø–æ—Å—Ç–∞–≤–ª—é –≤–∞–º –∫—ñ–ª—å–∫–∞ –ø—Ä–æ—Å—Ç–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å.\n"
        "–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –≤–∏ –∑–º–æ–∂–µ—Ç–µ *–∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∑—Ä—É—á–Ω–∏–π —á–∞—Å –¥–ª—è –æ–Ω–ª–∞–π–Ω-–∑—É—Å—Ç—Ä—ñ—á—ñ* —á–µ—Ä–µ–∑ Calendly üìÖ.\n\n"
        "‚ÑπÔ∏è –£ –±—É–¥—å-—è–∫–∏–π –º–æ–º–µ–Ω—Ç –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢  —Å–∫–∞—Å—É–≤–∞—Ç–∏ ‚Äî –∫–æ–º–∞–Ω–¥–æ—é /cancel\n"
        "‚Ä¢  –ø–æ—á–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ—á–∞—Ç–∫—É ‚Äî –∫–æ–º–∞–Ω–¥–æ—é /restart\n"
        "‚Ä¢  –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ ‚Äî –∫–æ–º–∞–Ω–¥–æ—é /start\n"
        "‚Ä¢  –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–≤—ñ–¥–∫—É ‚Äî –∫–æ–º–∞–Ω–¥–æ—é /help",
        parse_mode='Markdown'
    )
    # –î—Ä—É–≥–µ ‚Äî –æ–∫—Ä–µ–º–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è
    await update.message.reply_text(
        "–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î *—ñ–º'—è*, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ üëá",
        parse_mode='Markdown'
    )

    return States.NAME

'''
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(Questions.NAME)
    return States.NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data[States.NAME] = update.message.text
    await update.message.reply_text(Questions.PHONE)
    return States.PHONE
async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data[States.PHONE] = update.message.text
    await update.message.reply_text(Questions.BUSINESS)
    return States.BUSINESS
'''

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data[States.NAME] = update.message.text

    # Create a keyboard button to request contact
    contact_button = KeyboardButton("üìû –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
    reply_markup = ReplyKeyboardMarkup([[contact_button]], one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        "üì≤ –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.",
        reply_markup=reply_markup
    )
    return States.PHONE


async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.contact:
        context.user_data[States.PHONE] = update.message.contact.phone_number
    else:
        await update.message.reply_text("–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É.")
        return States.PHONE

    # Remove keyboard and proceed
    await update.message.reply_text(
        Questions.BUSINESS,
        reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True)
    )
    return States.BUSINESS


async def get_business(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data[States.BUSINESS] = update.message.text
    await update.message.reply_text(Questions.WEBSITE)
    return States.WEBSITE

async def get_website(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data[States.WEBSITE] = update.message.text
    reply_markup = ReplyKeyboardMarkup(
        [["–°–æ–ª–æ-–ø—ñ–¥–ø—Ä–∏—î–º–µ—Ü—å"], ["–î–æ 5-—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ —É –∫–æ–º–∞–Ω–¥—ñ"],
         ["–î–æ 10-—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ —É –∫–æ–º–∞–Ω–¥—ñ"], ["–î–æ 50-—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ —É –∫–æ–º–∞–Ω–¥—ñ"],
         ["–ë—ñ–ª—å—à–µ 50-—Ç–∏"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(Questions.EMPLOYEES, reply_markup=reply_markup)
    return States.EMPLOYEES

async def get_employees(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data[States.EMPLOYEES] = update.message.text
    reply_markup = ReplyKeyboardMarkup(
        [["–§–û–ü"], ["–¢–ó–û–í"], ["–Ü–Ω—à–µ"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(Questions.LEGAL_FORM, reply_markup=reply_markup)
    return States.LEGAL_FORM

async def get_legal_form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data[States.LEGAL_FORM] = update.message.text
    await update.message.reply_text(Questions.ROLES, reply_markup=ReplyKeyboardRemove())
    return States.ROLES

async def get_roles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data[States.ROLES] = update.message.text
    reply_markup = ReplyKeyboardMarkup(
        [["–¢–∞–∫"], ["–ù—ñ"], ["–ù–µ –∑–Ω–∞–π–æ–º–∏–π(–∞) —ñ–∑ —Ü–∏–º–∏ –≤–∏—Å–æ–∫–∏–º–∏ –º–∞—Ç–µ—Ä—ñ—è–º–∏ üôÇ"]],
        one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(Questions.FIN_KNOWLEDGE, reply_markup=reply_markup)
    return States.FIN_KNOWLEDGE

async def get_fin_knowledge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data[States.FIN_KNOWLEDGE] = update.message.text
    await update.message.reply_text(Questions.FIN_PERSON, reply_markup=ReplyKeyboardRemove())
    return States.FIN_PERSON

async def get_fin_person(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data[States.FIN_PERSON] = update.message.text
    await update.message.reply_text(Questions.FIN_REPORTS)
    return States.FIN_REPORTS

async def get_fin_reports(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data[States.FIN_REPORTS] = update.message.text
    reply_markup = ReplyKeyboardMarkup([["–¢–∞–∫"], ["–ù—ñ"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(Questions.CRM, reply_markup=reply_markup)
    return States.CRM

async def get_crm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data[States.CRM] = update.message.text
    if update.message.text == "–¢–∞–∫":
        await update.message.reply_text(Questions.CRM_NAME)
        return States.CRM_NAME
    else:
        context.user_data[States.CRM_NAME] = "–ù—ñ"
        return await get_crm_name(update, context)

async def get_crm_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text != "–ù—ñ":
        context.user_data[States.CRM_NAME] = update.message.text
    reply_markup = ReplyKeyboardMarkup([["–¢–∞–∫"], ["–ù—ñ"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(Questions.FINMAP, reply_markup=reply_markup)
    return States.FINMAP

async def get_finmap(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data[States.FINMAP] = update.message.text
    reply_markup = ReplyKeyboardMarkup([["–¢–∞–∫"], ["–ù—ñ"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(Questions.GOOGLE_SHEETS, reply_markup=reply_markup)
    return States.GOOGLE_SHEETS

async def get_google_sheets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data[States.GOOGLE_SHEETS] = update.message.text
    reply_markup = ReplyKeyboardMarkup([["–¢–∞–∫"], ["–ù—ñ"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(Questions.MEETINGS, reply_markup=reply_markup)
    return States.MEETINGS

async def get_meetings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data[States.MEETINGS] = update.message.text
    if update.message.text == "–¢–∞–∫":
        await update.message.reply_text(Questions.MEETING_DETAILS)
        return States.MEETING_DETAILS
    else:
        context.user_data[States.MEETING_DETAILS] = "–ù–µ–º–∞—î"
        return await get_meeting_details(update, context)

async def get_meeting_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text != "–ù–µ–º–∞—î":
        context.user_data[States.MEETING_DETAILS] = update.message.text
    await update.message.reply_text(Questions.REQUESTS)
    return States.REQUESTS

async def get_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data[States.REQUESTS] = update.message.text
    reply_markup = ReplyKeyboardMarkup([["–¢–∞–∫"], ["–ù—ñ"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(Questions.USED_CONSULTANTS, reply_markup=reply_markup)
    return States.USED_CONSULTANTS

async def get_used_consultants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data[States.USED_CONSULTANTS] = update.message.text
    reply_markup = ReplyKeyboardMarkup([["Offline —É –º. –õ—å–≤—ñ–≤"], ["Online Zoom/Google Meet"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(Questions.FORMAT, reply_markup=reply_markup)
    return States.FORMAT

async def get_format(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data[States.FORMAT] = update.message.text
    reply_markup = ReplyKeyboardMarkup(
        [["Instagram"], ["–ü–æ—Ä–∞–¥–∞ –æ–¥–Ω–æ–∫–ª—É–±–Ω–∏–∫–∞"], ["–ü–æ—Ä–∞–¥–∞ –¥—Ä—É–≥–∞/–ø–æ–¥—Ä—É–≥–∏"], ["Google –ø–æ—à—É–∫"]],
        one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(Questions.REFERRAL, reply_markup=reply_markup)
    return States.REFERRAL

async def get_referral(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data[States.REFERRAL] = update.message.text

    user_data = context.user_data
    summary = build_summary(user_data)
    reply_markup = ReplyKeyboardMarkup([["–¢–∞–∫"], ["–ù—ñ"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(f"*{Questions.CONFIRM}*\n\n{summary}\n\n–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?",
        parse_mode='Markdown', reply_markup=reply_markup)
    return States.CONFIRM

async def get_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_answer = update.message.text.lower()
    context.user_data[States.CONFIRM] = user_answer

    user_data = context.user_data
    if user_answer.lower() in ["—Ç–∞–∫", "yes"]:

         # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ SQLite
        #save_to_sqlite(user_data)
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø—É
        group_id = context.application.bot_data.get("chat_id")
        if group_id:
            summary = build_summary(user_data)
            await context.bot.send_message(chat_id=group_id, text=f"üì¨ –ù–æ–≤–∞ –∞–Ω–∫–µ—Ç–∞:\n\n{summary}", parse_mode='Markdown')
        else: 
            print("‚ùå Group chat ID not found in bot data.")

        await update.message.reply_text(
    
            "–î—è–∫—É—î–º–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞.\n\n"
        )
        
        return await provide_calendly(update, context)
    else:
        await update.message.reply_text(
            "–î–æ–±—Ä–µ, –¥–∞–≤–∞–π—Ç–µ –ø–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É. –í–≤–µ–¥—ñ—Ç—å /restart –¥–ª—è –ø–æ—á–∞—Ç–∫—É –∑–∞–Ω–æ–≤–æ."
        )
        return States.CONFIRM # Waiting for  /restart


async def provide_calendly(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    url = context.application.bot_data.get("calendly_url", "https://calendly.com/your-default-url")
    if not url:
        await update.message.reply_text("‚ùå URL Calendly –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –π–æ–≥–æ –≤ bot_data.")
        return ConversationHandler.END
    keyboard = [[InlineKeyboardButton("üìÖ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á", url=url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –æ–±—Ä–∞—Ç–∏ –∑—Ä—É—á–Ω–∏–π —á–∞—Å –¥–ª—è –∑—É—Å—Ç—Ä—ñ—á—ñ:",
        reply_markup=reply_markup
    )

    return ConversationHandler.END
